 create table student(rollno numeric,name varchar(30),dob date,branch varchar(10),yearofstudy numeric);
 insert into student values(1,"sagar",2000-2-12,"cse",2);     ...
 insert into student values(3,'sam','2002-03-21','cse',2020);
 inserting multiple values
	insert into student values(6,"raju","2000-4-12","cse",2021),
    -> (7,"srikar","2005-08-29","cse",2025),
    -> (8,"krishna","1996-5-18","cse",2023);
a)list details of all students;
select *from tables;
--------+---------+------------+--------+-------------+
| rollno | name    | dob        | branch | yearofstudy |
+--------+---------+------------+--------+-------------+
|      1 | sagar   | 2000-02-12 | cse    |        2021 |
|      2 | rahul   | 2000-09-21 | ece    |        2019 |
|      3 | sam     | 2002-03-21 | cse    |        2020 |
|      4 | samuel  | 2000-02-22 | cse    |        2021 |
|      5 | vinay   | 2002-08-31 | cse    |        2021 |
|      6 | raju    | 2000-04-12 | cse    |        2021 |
|      7 | srikar  | 2005-08-29 | cse    |        2025 |
|      8 | krishna | 1996-05-18 | cse    |        2023 |
|      9 | esh     | 2000-05-02 | cse    |        2021 |
|     10 | jan     | 2000-07-12 | cse    |        2021 |
+--------+---------+------------+--------+-------------+

b)list all students of all branches;

i/p:select rollno,name,branch from student;
o/p:
+--------+---------+--------+
| rollno | name    | branch |
+--------+---------+--------+
|      1 | sagar   | cse    |
|      2 | rahul   | ece    |
|      3 | sam     | cse    |
|      4 | samuel  | cse    |
|      5 | vinay   | cse    |
|      6 | raju    | cse    |
|      7 | srikar  | cse    |
|      8 | krishna | cse    |
|      9 | esh     | cse    |
|     10 | jan     | cse    |
+--------+---------+--------+

c) student name starts with character-"s";
from student where name like 's%';
o/p:	+--------+
	| name   |
	+--------+
	| sagar  |
	| sam    |
	| samuel |
	| srikar |
	+--------+
	4 rows in set 
d)student name whose third character is s;
i/p:
	mysql> select name from student where name like "__s%";
o/p:
	Empty set;
e) student name whose name contains two "s" characters;
 for no data in table inserting the new:
	 insert into student values(11,"ssseslss","2003-4-22","eee",2019);
 then table becomes:
	+--------+----------+------------+--------+-------------+
| rollno | name     | dob        | branch | yearofstudy |
+--------+----------+------------+--------+-------------+
|      1 | sagar    | 2000-02-12 | cse    |        2021 |
|      2 | rahul    | 2000-09-21 | ece    |        2019 |
|      3 | sam      | 2002-03-21 | cse    |        2020 |
|      4 | samuel   | 2000-02-22 | cse    |        2021 |
|      5 | vinay    | 2002-08-31 | cse    |        2021 |
|      6 | raju     | 2000-04-12 | cse    |        2021 |
|      7 | srikar   | 2005-08-29 | cse    |        2025 |
|      8 | krishna  | 1996-05-18 | cse    |        2023 |
|      9 | esh      | 2000-05-02 | cse    |        2021 |
|     10 | jan      | 2000-07-12 | cse    |        2021 |
|     11 | ssseslss | 2003-04-22 | eee    |        2019 |
+--------+----------+------------+--------+-------------+
11 rows in set (0.00 sec)

i/p:
	 select name from student where name like "%s%s%";
	+----------+
	| name     |
	+----------+
	| ssseslss |
	+----------|
f)list student name whose branch is null;
	--->for these we have to insert the row by skippiing the data of branch(no enter the "null" in branch);

insert into student(rollno,name,dob,yearofstudy) values(12,"ram","2002-11-9",2018);

mysql> select *from student;
+--------+----------+------------+--------+-------------+
| rollno | name     | dob        | branch | yearofstudy |
+--------+----------+------------+--------+-------------+
|      1 | sagar    | 2000-02-12 | cse    |        2021 |
|      2 | rahul    | 2000-09-21 | ece    |        2019 |
|      3 | sam      | 2002-03-21 | cse    |        2020 |
|      4 | samuel   | 2000-02-22 | cse    |        2021 |
|      5 | vinay    | 2002-08-31 | cse    |        2021 |
|      6 | raju     | 2000-04-12 | cse    |        2021 |
|      7 | srikar   | 2005-08-29 | cse    |        2025 |
|      8 | krishna  | 1996-05-18 | cse    |        2023 |
|      9 | esh      | 2000-05-02 | cse    |        2021 |
|     10 | jan      | 2000-07-12 | cse    |        2021 |
|     11 | ssseslss | 2003-04-22 | eee    |        2019 |
|     12 | ram      | 2002-11-09 | NULL   |        2018 |
+--------+----------+------------+--------+-------------|
i/p:

	mysql> select *from student where branch is NULL;
o/p:
+--------+------+------------+--------+-------------+
| rollno | name | dob        | branch | yearofstudy |
+--------+------+------------+--------+-------------+
|     12 | ram  | 2002-11-09 | NULL   |        2018 |
+--------+------+------------+--------+-------------+

g)select the student whose students are from only ece,cse and their born after 1980;
i/p:> select *from student where dob>'1980-12-31' and (branch="cse" or branch="ece");

--+---------+------------+--------+-------------+
| rollno | name    | dob        | branch | yearofstudy |
+--------+---------+------------+--------+-------------+
|      1 | sagar   | 2000-02-12 | cse    |        2021 |
|      2 | rahul   | 2000-09-21 | ece    |        2019 |
|      3 | sam     | 2002-03-21 | cse    |        2020 |
|      4 | samuel  | 2000-02-22 | cse    |        2021 |
|      5 | vinay   | 2002-08-31 | cse    |        2021 |
|      6 | raju    | 2000-04-12 | cse    |        2021 |
|      7 | srikar  | 2005-08-29 | cse    |        2025 |
|      8 | krishna | 1996-05-18 | cse    |        2023 |
|      9 | esh     | 2000-05-02 | cse    |        2021 |
|     10 | jan     | 2000-07-12 | cse    |        2021 |
+--------+---------+------------+--------+-------------+




h)listing all the students in reverse order of their names:
i/P:
	select name from student;
+----------+
| name     |
+----------+
| sagar    |
| rahul    |
| sam      |
| samuel   |
| vinay    |
| raju     |
| srikar   |
| krishna  |
| esh      |
| jan      |
| ssseslss |
| ram      |
+----------+
12 rows in set (0.00 sec)

mysql> select reverse(name) from student;
+---------------+
| reverse(name) |
+---------------+
| ragas         |
| luhar         |
| mas           |
| leumas        |
| yaniv         |
| ujar          |
| rakirs        |
| anhsirk       |
| hse           |
| naj           |
| sslsesss      |
| mar           |
+---------------+

i) deletes the student names starts with "s";
i/p:
	delete from student where name like "s%";
o/p:
	deletes the student names;
j)update the students branch whose branch is cse into ece
i/p:
	 update student set branch="ece" where branch="cse";
o/p:
	select *from student;
+--------+----------+------------+--------+-------------+
| rollno | name     | dob        | branch | yearofstudy |
+--------+----------+------------+--------+-------------+
|      1 | sagar    | 2000-02-12 | ece    |        2021 |
|      2 | rahul    | 2000-09-21 | ece    |        2019 |
|      3 | sam      | 2002-03-21 | ece    |        2020 |
|      4 | samuel   | 2000-02-22 | ece    |        2021 |
|      5 | vinay    | 2002-08-31 | ece    |        2021 |
|      6 | raju     | 2000-04-12 | ece    |        2021 |
|      7 | srikar   | 2005-08-29 | ece    |        2025 |
|      8 | krishna  | 1996-05-18 | ece    |        2023 |
|      9 | esh      | 2000-05-02 | ece    |        2021 |
|     10 | jan      | 2000-07-12 | ece    |        2021 |
|     11 | ssseslss | 2003-04-22 | eee    |        2019 |
|     12 | ram      | 2002-11-09 | eee    |        2018 |
+--------+----------+------------+--------+-------------+
k)display student name with * after names of all students
i/p:
	select rpad(name,10,"*") from student;
o/p:(right side)
+-------------------+
| rpad(name,10,"*") |
+-------------------+
| sagar*****        |
| rahul*****        |
| sam*******        |
| samuel****        |
| vinay*****        |
| raju******        |
| srikar****        |
| krishna***        |
| esh*******        |
| jan*******        |
| ssseslss**        |
| ram*******        |
+-------------------+
note: if left side you need to give the lpad(name,length,symbol to be filled);
-----------------------------------------------------------------------------------------------------------
1)select distinct branch from student;
---> gives the non-repeated values in the table.
2)sql like is used to compare here we have two constraints
	i)%-for two or more characters
	ii)"_"(underscore)-for single character 
LIKE Operator 	Description
WHERE CustomerName LIKE 'a%' 	Finds any values that start with "a"
WHERE CustomerName LIKE '%a' 	Finds any values that end with "a"
WHERE CustomerName LIKE '%or%' 	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%' 	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%' 	Finds any values that start with "a" and are at least 2 characters in length
WHERE CustomerName LIKE 'a__%' 	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o' 	Finds any values that start with "a" and ends with "o"
3)
	Operators in The WHERE Clause

The following operators can be used in the WHERE clause:
Operator 	Description 	
= 	Equal 	
> 	Greater than 	
< 	Less than 	
>= 	Greater than or equal 	
<= 	Less than or equal 	
<> 	Not equal. Note: In some versions of SQL this operator may be written as != 	
BETWEEN 	Between a certain range 	
LIKE 	Search for a pattern 	
IN 	To specify multiple possible values for a column
4)The WHERE clause can be combined with AND, OR, and NOT operators.

The AND and OR operators are used to filter records based on more than one condition:

    The AND operator displays a record if all the conditions separated by AND are TRUE.
    The OR operator displays a record if any of the conditions separated by OR is TRUE.

The NOT operator displays a record if the condition(s) is NOT TRUE.
AND Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;
OR Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;
NOT Syntax:
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition; 
Combining AND, OR and NOT

You can also combine the AND, OR and NOT operators.

The following SQL statement selects all fields from "Customers" where country is "Germany" AND city must be "Berlin" OR "München" (use parenthesis to form complex expressions):
Example
SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='München'); 
The following SQL statement selects all fields from "Customers" where country is NOT "Germany" and NOT "USA":
Example
SELECT * FROM Customers
WHERE NOT Country='Germany' AND NOT Country='USA'; 
5)
	The SQL ORDER BY Keyword

The ORDER BY keyword is used to sort the result-set in ascending or descending order.

The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.
ORDER BY Syntax
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC; 
ORDER BY Several Columns Example 2

The following SQL statement selects all customers from the "Customers" table, sorted ascending by the "Country" and descending by the "CustomerName" column:
Example
SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;
6)
	
