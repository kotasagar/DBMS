12) Create a cursor to modify the salary of all employees belonging to 'Research' department by 150%.

mysql> delimiter //
mysql> create procedure emp_sal_updates(in dept varchar(20))
    -> begin
    -> declare flag int default 0;
    -> declare s int default 0;
    -> declare update_cur cursor for select SALARY from EMPLOYEE,DEPARTMENT where EMPLOYEE.DNO=DEPARTMENT.DNO and DEPARTMENT.DNAME=dept;
    -> declare continue handler for not found set flag=1;
    -> open update_cur;
    -> fetch update_cur into s;
    -> update EMPLOYEE,DEPARTMENT set SALARY=SALARY+(s*150/100) where EMPLOYEE.DNO=DEPARTMENT.DNO and DEPARTMENT.DNAME=dept;
    -> close update_cur;
    -> end
    -> //
Query OK, 0 rows affected (0.03 sec)

mysql> delimiter ;

mysql> update EMPLOYEE,DEPARTMENT set SALARY=40000 where EMPLOYEE.DNO=DEPARTMENT.DNO and DEPARTMENT.DNAME="Research";
Query OK, 4 rows affected (0.05 sec)
Rows matched: 4  Changed: 4  Warnings: 0

mysql> select * from EMPLOYEE;
+----------+-------+----------+-----------+------------+--------------+--------+--------+-----------+------+
| FNAME    | MNAME | LNAME    | SSN       | DOB        | ADDRESS      | GENDER | SALARY | SUPERSSN  | DNO  |
+----------+-------+----------+-----------+------------+--------------+--------+--------+-----------+------+
| John     | B     | Smith    | 123456789 | 1965-02-09 | 731 Fondren  | M      |  40000 | 333445555 | 5    |
| Franklin | T     | Wong     | 333445555 | 1955-12-08 | 638 Voss     | M      |  40000 | 888665555 | 5    |
| Joyce    | A     | English  | 453453453 | 1972-07-31 | 5631 Rice    | F      |  40000 | 333445555 | 5    |
| Ramesh   | K     | Narayana | 666884444 | 1962-09-15 | 975 Fire Oak | M      |  40000 | 333445555 | 5    |
| James    | E     | Brog     | 888665555 | 1937-10-10 | 450 Stone    | M      |  38000 | NULL      | 1    |
| Jennifer | S     | Wallance | 987654321 | 1941-06-20 | 291 Berry    | F      |  43000 | 888665555 | 4    |
| Ahmad    | V     | Jabbar   | 987987987 | 1969-03-22 | 980 Dallas   | M      |  25000 | 987987987 | 4    |
| Alicia   | J     | Zelaya   | 999887777 | 1968-01-19 | 3321 Castle  | F      |  25000 | 987654321 | 4    |
+----------+-------+----------+-----------+------------+--------------+--------+--------+-----------+------+
8 rows in set (0.00 sec)

mysql> call emp_sal_updates("Research");
Query OK, 4 rows affected (0.06 sec)

mysql> select * from EMPLOYEE;
+----------+-------+----------+-----------+------------+--------------+--------+--------+-----------+------+
| FNAME    | MNAME | LNAME    | SSN       | DOB        | ADDRESS      | GENDER | SALARY | SUPERSSN  | DNO  |
+----------+-------+----------+-----------+------------+--------------+--------+--------+-----------+------+
| John     | B     | Smith    | 123456789 | 1965-02-09 | 731 Fondren  | M      | 100000 | 333445555 | 5    |
| Franklin | T     | Wong     | 333445555 | 1955-12-08 | 638 Voss     | M      | 100000 | 888665555 | 5    |
| Joyce    | A     | English  | 453453453 | 1972-07-31 | 5631 Rice    | F      | 100000 | 333445555 | 5    |
| Ramesh   | K     | Narayana | 666884444 | 1962-09-15 | 975 Fire Oak | M      | 100000 | 333445555 | 5    |
| James    | E     | Brog     | 888665555 | 1937-10-10 | 450 Stone    | M      |  38000 | NULL      | 1    |
| Jennifer | S     | Wallance | 987654321 | 1941-06-20 | 291 Berry    | F      |  43000 | 888665555 | 4    |
| Ahmad    | V     | Jabbar   | 987987987 | 1969-03-22 | 980 Dallas   | M      |  25000 | 987987987 | 4    |
| Alicia   | J     | Zelaya   | 999887777 | 1968-01-19 | 3321 Castle  | F      |  25000 | 987654321 | 4    |
+----------+-------+----------+-----------+------------+--------------+--------+--------+-----------+------+
8 rows in set (0.01 sec)

13) Consider the college database. Retrieve all students who have registered for a specific course and store their details into another table using Cursors.


mysql> create table student(sno int primary key,sname varchar(20),
    -> dob date,course varchar(5),year int);
Query OK, 0 rows affected (0.00 sec)

mysql> insert into
    -> student(sno,sname,dob,course,year) values(222,"venu","1991-09-26","cse",2020),
    -> (333,'siva','1990-04-10','AIDS',2021),(111,"sagar","1990-03-16","cse",2020),(444,'Ramu','1980-05-12','IT',2010),
    -> (555,'niteesh','1993-03-26','ECE',2017),(666,'joel','1995-05-05','AIML',2002);
Query OK, 6 rows affected (0.00 sec)
Records: 6  Duplicates: 0  Warnings: 0
mysql> select * from student;
+-----+---------+------------+--------+------+
| sno | sname   | dob        | course | year |
+-----+---------+------------+--------+------+
| 111 | sagar   | 1990-03-16 | cse    | 2020 |
| 222 | venu    | 1991-09-26 | cse    | 2020 |
| 333 | siva    | 1990-04-10 | AIDS   | 2021 |
| 444 | Ramu    | 1980-05-12 | IT     | 2010 |
| 555 | niteesh | 1993-03-26 | ECE    | 2017 |
| 666 | joel    | 1995-05-05 | AIML   | 2002 |
+-----+---------+------------+--------+------+
6 rows in set (0.00 sec)

mysql> create table temp_student(stdno int,stdname varchar(20),stdcourse varchar(20));
Query OK, 0 rows affected (0.00 sec)

mysql>delimiter //
mysql>create procedure getStudents(in x varchar(10))
->begin
->declare flag int default 0;
->declare stdno int;
->declare stdname varchar(20);
->declare stdcourse varchar(10);
->declare get_cur cursor for select sno,sname,course from student where course=x;
->declare continue handler for not found set flag=1;
->open get_cur;
->getRec: LOOP
->fetch get_cur into stdno,stdname,stdcourse;
->if flag=1 then
->LEAVE getRec;
->end if;
->insert into temp_student values(stdno,stdname,stdcourse);
->END LOOP getRec;
->close get_cur;
->end
->//
mysql>delimiter ;
mysql> call getStudents("cse");
Query OK, 0 rows affected, 1 warning (0.00 sec)
mysql> select * from temp_student;
+-------+---------+-----------+
| stdno | stdname | stdcourse |
+-------+---------+-----------+
|   111 | sagar   | cse       |
|   222 | venu    | cse       |
+-------+---------+-----------+
2 rows in set (0.00 sec)



14) Write an update trigger on Account table. The system should keep track of the records that are being updated.

mysql>delimiter //
->CREATE TRIGGER ACCUPDATE BEFORE UPDATE ON Account FOR EACH ROW
->BEGIN
->DECLARE emsg varchar(250);
->SET emsg="NEW BALANCE CANNOT BE LESSTHAN OLD BALANCE";
->IF new.balance<old.balance THEN
->SIGNAL SQLSTATE '45000'
->SET MESSAGE_TEXT=emsg;
->END IF;
->END
->//
mysql>delimiter ;

mysql> select * from Account;
+-------+---------+
| accno | balance |
+-------+---------+
|   111 |    1000 |
|   222 |    2000 |
|   333 |    3000 |
|   444 |    4000 |
|   555 |    5000 |
+-------+---------+
5 rows in set (0.02 sec)

mysql> update Account set balance = 500 where accno = 111;
ERROR 1644 (45000): NEW BALANCE CANNOT BE LESSTHAN OLD BALANCE


